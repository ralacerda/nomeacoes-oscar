---
import { getMovieBySlug } from "@/utils/getData";
import AwardList from "./AwardList.astro";
import CastList from "./CastList.astro";
import ImdbLink from "./ImdbLink.astro";
import type { Movie } from "@/types";

export interface Props {
  slug: string;
  currentAward: string;
}

const { slug, currentAward } = Astro.props;

const movie: Movie = getMovieBySlug(slug);

const hasTranslatedName =
  movie.title.toLowerCase() != movie.localTitle.toLowerCase() ? true : false;

const awardInfo = movie.awards.filter(
  (award) => award.shortName == currentAward
);
const otherAwards = movie.awards.filter(
  (award) => award.shortName != currentAward
);
---

<div class="card">
  <div class="poster">
    <ImdbLink id={movie.imdbID}>
      <img src={movie.poster} />
    </ImdbLink>
  </div>

  <div class="info">
    <div>
      <h2 class="title">
        <ImdbLink id={movie.imdbID}
          >{awardInfo[0]?.nominee || movie.localTitle}</ImdbLink
        >
      </h2>
      <p>
        {
          (awardInfo[0]?.nominee && (
            <span class="small-title">{movie.localTitle}</span>
          )) ||
            (hasTranslatedName && (
              <span class="original-title">{movie.title}</span>
            ))
        }
      </p>
      {
        currentAward != "direcao" && (
          <p>
            <CastList castArray={movie.directors} />
          </p>
        )
      }
      <p class="tags">
        <span>{movie.runtimeMin} min</span>{
          movie.genres.map((genre) => <span>{genre}</span>)
        }
      </p>
    </div>
  </div>
  <div class="credits">
    <p>
      <CastList castArray={movie.actors} />
    </p>
  </div>
  <div class="indications">
    {otherAwards.length && currentAward ? <p>Outras indicações:</p> : ""}
    <AwardList awardList={otherAwards} oscarYear={movie.oscarYear} />
  </div>
</div>

<style lang="scss">
  .original-title {
    font-style: italic;
    font-size: 0.8rem;
  }

  .card {
    margin: calc(var(--spacing) * 2) 0;
    padding: calc(var(--spacing) * 2) var(--block-spacing-horizontal);
    border-radius: var(--border-radius);
    background: var(--card-background-color);
    box-shadow: var(--card-box-shadow);

    display: grid;
    /* grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); */
    grid-template-columns: 1fr 3fr;
    grid-template-areas:
      "poster info"
      "poster credits"
      "poster indications";
    align-items: flex-start;

    gap: var(--block-spacing-horizontal);
  }

  .credits {
    grid-area: credits;

    & > p {
      // margin: calc(var(--spacing) * 0.5) 0;
    }
  }

  .poster {
    grid-area: poster;
  }

  .indications {
    grid-area: indications;
  }

  .info {
    grid-area: info;
  }

  .title {
    --typography-spacing-vertical: 0;
  }

  .card {
    --typography-spacing-vertical: 0.2rem;
  }

  .tags span {
    border-radius: 0.2rem;
    padding: 0.1rem 0.2rem;
    font-size: 0.6rem;
    border: 1px solid currentColor;
    margin-right: 0.5rem;
  }
</style>
